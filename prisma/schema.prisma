generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @db.Timestamp(6)
  first_name              String                    @db.VarChar(255)
  last_name               String                    @db.VarChar(255)
  email                   String                    @unique @db.VarChar(255)
  password                String
  gender                  String?                   @db.VarChar(255)
  contact_no              String?                   @db.VarChar(255)
  username                String?
  position                String?                   @db.VarChar(255)
  province                String?                   @db.VarChar(255)
  city                    String?                   @db.VarChar(255)
  barangay                String?                   @db.VarChar(255)
  profile_photo           String?
  admin_logged_in_history admin_logged_in_history[]
  received_case           received_case[]
}

model admin_logged_in_history {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  time_in    DateTime? @default(now()) @db.Timestamp(6)
  time_out   DateTime? @db.Timestamp(6)
  admin_id   String    @db.Uuid
  admin      admin     @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_id")
}

model details {
  user_id          String    @unique @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @db.Timestamp(6)
  room             String    @db.VarChar(64)
  floor_no         String    @db.VarChar(64)
  equipment_needed String[]
  narrative        String?
  user             user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model emergency_hotlines {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  name        String    @db.VarChar(255)
  landline_no String[]  @db.VarChar(255)
  mobile_no   String[]  @db.VarChar(255)
  province    String    @db.VarChar(255)
  city        String    @db.VarChar(255)
  barangay    String    @db.VarChar(255)
}

model monitoring {
  id               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?             @default(now()) @db.Timestamp(6)
  updated_at       DateTime?             @db.Timestamp(6)
  state            user_emergency_state?
  room             String                @db.VarChar(64)
  floor_no         String                @db.VarChar(64)
  equipment_needed String[]
  narrative        String?
  emergency_level  Int?                  @db.SmallInt
  photo            String[]
  user_id          String                @db.Uuid
  user             user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  received_case    received_case[]
}

model received_case {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  updated_at    DateTime?  @db.Timestamp(6)
  user_id       String     @db.Uuid
  monitoring_id String     @db.Uuid
  admin_id      String     @db.Uuid
  admin         admin      @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_id")
  monitoring    monitoring @relation(fields: [monitoring_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_monitoring_id")
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model user {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime?       @default(now()) @db.Timestamp(6)
  updated_at         DateTime?       @db.Timestamp(6)
  role               user_role
  sr_code            String?         @db.VarChar(255)
  first_name         String          @db.VarChar(255)
  last_name          String          @db.VarChar(255)
  gender             String?         @default("N/A") @db.VarChar(255)
  email              String          @db.VarChar(255)
  password           String
  emergency_no       String[]        @default(dbgenerated("'{N/A}'::character varying[]")) @db.VarChar(255)
  medical_conditions String[]        @default(dbgenerated("'{N/A}'::text[]"))
  province           String?         @default("N/A") @db.VarChar(255)
  city               String?         @default("N/A") @db.VarChar(255)
  barangay           String?         @default("N/A") @db.VarChar(255)
  profile_photo      String?
  details            details?
  monitoring         monitoring[]
  received_case      received_case[]
}

enum user_emergency_state {
  TO_RECEIVE @map("TO RECEIVE")
  PENDING
  COMPLETED
}

enum user_role {
  STUDENT
  PROFESSOR
  STAFF
}
